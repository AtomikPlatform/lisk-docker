#!/bin/bash

NETWORK="$1"

if [ "$NETWORK" != "local" ] && [ "$NETWORK" != "test" ] && [ "$NETWORK" != "main" ]; then
  echo "X Invalid first argument (must be local, test or main)."
  exit 1
else
  DB_NAME="lisk_$NETWORK"
fi

download_blockchain() {
  echo "Downloading blockchain snapshot..."
  curl -o blockchain.db.gz "https://downloads.lisk.io/lisk/$NETWORK/blockchain.db.gz" &> /dev/null
  if [ $? == 0 ] && [ -f blockchain.db.gz ]; then
    gunzip -q blockchain.db.gz &> /dev/null
  fi
  if [ $? != 0 ]; then
    rm -f blockchain.*
    echo "X Failed to download blockchain snapshot."
    exit 1
  else
    echo "√ Blockchain snapshot downloaded successfully."
  fi
}

restore_blockchain() {
  echo "Restoring blockchain..."
  if [ "$DATABASE_HOST" == "localhost" ]
  then
    if [ -f blockchain.db ]; then
      psql -qd "$DATABASE_NAME" < blockchain.db &> /dev/null
    fi
  else
    if [ -f blockchain.db ]; then
      psql -h "$DATABASE_HOST" -U "$DATABASE_USER" -d "$DATABASE_NAME" -w < blockchain.db &> /dev/null
      rm $PGPASSFILE
    fi
  fi
  rm -f blockchain.*
  if [ $? != 0 ]; then
    echo "X Failed to restore blockchain."
    exit 1
  else
    echo "√ Blockchain restored successfully."
  fi
}

populate_database() {
  if [ "${NETWORK}" == "local" ]; then
      return
  fi

  if [ "$DATABASE_HOST" == "localhost" ]
  then
    echo "Looking for blocks table"
    psql -qd "$DATABASE_NAME" -c "select * from blocks limit 1;" &> /dev/null
    if [ $? == 1 ]; then
      download_blockchain
      restore_blockchain
      else
      echo "Found blocks table"
    fi
  else
    echo "Looking for blocks table"
    psql -h "$DATABASE_HOST" -U "$DATABASE_USER" -d "$DATABASE_NAME" -w -c "select * from blocks limit 1;" &> /dev/null
    if [ $? == 1 ]; then
      download_blockchain
      restore_blockchain
      else
      echo "Found blocks table"
    fi
  fi
}

start() {
  jq -c ".consoleLogLevel = \"${LOG_LEVEL:=debug}\"" config.json > tmp.$$.json && mv tmp.$$.json config.json
  if [ "${FORGING_WHITELIST_IP:=127.0.0.1}" != "127.0.0.1" ]
  then
    jq -c ".forging.access.whiteList = [\"127.0.0.1\",\"$FORGING_WHITELIST_IP\"]" config.json > tmp.$$.json && mv tmp.$$.json config.json
  fi

  if [ "${DATABASE_HOST:=localhost}" == "localhost" ]
  then
    echo "Running with config:"
    cat config.json
    echo "Connecting to local database"
    DATABASE_NAME=$DB_NAME
    export DATABASE_NAME
    sudo service postgresql start
    sleep 2
    echo "Postgres is up - executing command"
    populate_database
    echo "Starting node"
    node app.js
  else
    jq -c ".db.host = \"${DATABASE_HOST:=localhost}\"" config.json > tmp.$$.json && mv tmp.$$.json config.json
    jq -c ".db.port = ${DATABASE_PORT:=5432}" config.json > tmp.$$.json && mv tmp.$$.json config.json
    jq -c ".db.database = \"${DATABASE_NAME:=$DB_NAME}\"" config.json > tmp.$$.json && mv tmp.$$.json config.json
    jq -c ".db.user = \"${DATABASE_USER}\"" config.json > tmp.$$.json && mv tmp.$$.json config.json
    jq -c ".db.password = \"${DATABASE_PASSWORD:=password}\"" config.json > tmp.$$.json && mv tmp.$$.json config.json
    echo "Running with config:"
    cat config.json
    echo "Connecting to remote database"
    touch ./.pgpass
    PGPASSFILE="./.pgpass"
    echo "$DATABASE_HOST:$DATABASE_PORT:$DATABASE_USER:$DATABASE_USER:$DATABASE_PASSWORD" >> $PGPASSFILE
    echo "$DATABASE_HOST:$DATABASE_PORT:$DATABASE_NAME:$DATABASE_USER:$DATABASE_PASSWORD" >> $PGPASSFILE
    sudo chmod 600 $PGPASSFILE
    export PGPASSFILE
    until psql -h "$DATABASE_HOST" -U "$DATABASE_USER" -d "$DATABASE_USER" -w -c '\l' &> /dev/null; do
      echo "Postgres is unavailable - sleeping"
      sleep 1
    done
    echo "Postgres is up - executing command"
    psql -h "$DATABASE_HOST" -U "$DATABASE_USER" -d "$DATABASE_USER" -w -c "CREATE DATABASE ${DATABASE_NAME};" &> /dev/null
    populate_database
    echo "Starting node"
    node app.js
  fi
}

if [ ! -f ./lisk/config.json ]; then
  echo "Volume not yet initialized, setting up..."
  sudo chown lisk:lisk ./lisk
  /bin/cp -rf ./src/* ./lisk/
  cd ./lisk
elif ! diff -q <(jq '.version' ./lisk/config.json) <(jq '.version' ./src/config.json); then
  echo "Version changed, copying from source..."
  sudo chown lisk:lisk ./lisk
  mv ./lisk/logs ./
  rm -rf ./lisk/*
  /bin/cp -rf ./src/* ./lisk/
  mv ./logs ./lisk/
  cd ./lisk
else
  echo "Nothing changed, starting app..."
fi

start